{"version":3,"sources":["redux/glows/getGlowCvars.ts","redux/glows/getGlowsCvarText.ts","redux/normalize.ts","redux/glows/glowsSlice.ts","glows/GlowsDisplay.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","index.tsx"],"names":["RENDER_GLOW_ORDER","getGlowCvars","createSelector","s","glows","cvars","flags","cloneToColorblind","map","glow","byId","filter","cvar","isColorblind","toFloatStr","u8","getGlowsCvarText","state","shouldCloneToColorblind","orderedIds","flatMap","glowCvar","targetGlowName","replace","r","g","b","join","floatStrToU8","value","Math","floor","parseFloat","data","indexFn","slice","createSlice","name","initialState","glowData","endsWith","PojoMap","fromIndexing","reducers","setGlowColor","action","payload","colorblindCvar","setCloneToColorblind","actions","GlowDisplay","GlowCvarBox","GlowBox","description","getGlowCss","styled","div","p","GlowsDisplay","useSelector","cvarText","dispatch","useDispatch","type","checked","onChange","currentTarget","glowActions","GlowGrid","gd","key","App","useEffect","document","title","className","Boolean","window","location","hostname","match","rootReducer","combineReducers","GlowsReducer","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eec89b34.chunk.js","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\nimport { Normalized } from \"../normalize\";\nimport { AppState } from \"../rootReducer\";\n\nconst RENDER_GLOW_ORDER = [\n  \"cl_glow_survivor_health_high\",\n  \"cl_glow_survivor_health_med\",\n  \"cl_glow_survivor_health_low\",\n  \"cl_glow_survivor_health_crit\",\n  \"cl_glow_survivor_health_high_colorblind\",\n  \"cl_glow_survivor_health_med_colorblind\",\n  \"cl_glow_survivor_health_low_colorblind\",\n  \"cl_glow_survivor_health_crit_colorblind\",\n  \"cl_glow_survivor\",\n  \"cl_glow_ability\",\n  \"cl_glow_survivor_hurt\",\n  \"cl_glow_survivor_vomit\",\n  \"cl_glow_item\",\n  \"cl_glow_item_far\",\n  \"cl_glow_thirdstrike_item\",\n  \"cl_glow_infected_vomit\",\n  \"cl_glow_ghost_infected\",\n  \"cl_glow_infected\",\n  \"cl_glow_ability_colorblind\",\n  \"cl_glow_thirdstrike_item_colorblind\",\n];\n\nconst getGlowCvars = createSelector(\n  (s: AppState) => s.glows.cvars,\n  (s: AppState) => s.glows.flags.cloneToColorblind,\n  (cvars, cloneToColorblind) =>\n    RENDER_GLOW_ORDER.map((glow) => cvars.byId[glow]!).filter((cvar) => {\n      // If cloneToColorblind is set, hide colorblind version cvars.\n      return !(cloneToColorblind && cvar.isColorblind);\n    })\n);\n\nexport default getGlowCvars;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { Normalized } from \"../normalize\";\nimport { AppState } from \"../rootReducer\";\n\nfunction toFloatStr(u8: number) {\n  return `${u8 / 255}`;\n}\nconst getGlowsCvarText = createSelector(\n  (state: AppState) => state.glows.cvars,\n  (state: AppState) => state.glows.flags.cloneToColorblind,\n  (glows, shouldCloneToColorblind) => {\n    return glows.orderedIds\n      .flatMap((glowCvar) => {\n        const targetGlowName = shouldCloneToColorblind\n          ? glowCvar.replace(/_colorblind$/, \"\")\n          : glowCvar;\n        const glow = glows.byId[targetGlowName]!;\n        return [\n          `${glowCvar}_r \"${toFloatStr(glow.r)}\";`,\n          `${glowCvar}_g \"${toFloatStr(glow.g)}\";`,\n          `${glowCvar}_b \"${toFloatStr(glow.b)}\";`,\n        ];\n      })\n      .join(\"\\n\");\n  }\n);\n\nexport default getGlowsCvarText;\n","import { PojoMap } from \"pojo-maps\";\n\nexport type Normalized<T extends {}, U extends PropertyKey> = {\n  byId: PojoMap<U, T>;\n  orderedIds: U[];\n};\n\nexport function normalize<T extends {}, U extends PropertyKey>(\n  data: T[],\n  indexFn: (item: T) => U\n) {\n  return {\n    byId: PojoMap.fromIndexing(data, indexFn),\n    orderedIds: data.map(indexFn),\n  } as const;\n}\n\nexport const Normalized = {\n  getOrdered: <T extends {}, U extends PropertyKey>(store: Normalized<T, U>) =>\n    store.orderedIds.map((id) => PojoMap.get(store.byId, id)!),\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { normalize } from \"../normalize\";\nimport glowData from \"./glow_data.json\";\n\ntype RGBValues = {\n  r: number;\n  g: number;\n  b: number;\n};\n\nfunction floatStrToU8(value: string): number {\n  return Math.floor(parseFloat(value) * 255);\n}\n\nconst slice = createSlice({\n  name: \"glows\",\n  initialState: {\n    cvars: normalize(\n      glowData.map((cvar) => ({\n        ...cvar,\n        r: floatStrToU8(cvar.r),\n        g: floatStrToU8(cvar.g),\n        b: floatStrToU8(cvar.b),\n        isColorblind: cvar.name.endsWith(\"colorblind\"),\n      })),\n      (glow) => glow.name\n    ),\n    flags: {\n      cloneToColorblind: true,\n    },\n  },\n  reducers: {\n    setGlowColor: (\n      state,\n      action: PayloadAction<{ name: string; value: RGBValues }>\n    ) => {\n      const cvar = state.cvars.byId[action.payload.name];\n      const { r, g, b } = action.payload.value;\n      if (cvar) {\n        cvar.r = r;\n        cvar.g = g;\n        cvar.b = b;\n        const colorblindCvar = state.cvars.byId[`${cvar.name}_colorblind`];\n        if (state.flags.cloneToColorblind && colorblindCvar) {\n          // Also clone this change to the colorblind version of the cvar\n          colorblindCvar.r = r;\n          colorblindCvar.g = g;\n          colorblindCvar.b = b;\n        }\n      }\n    },\n    setCloneToColorblind: (state, action: PayloadAction<boolean>) => {\n      state.flags.cloneToColorblind = action.payload;\n    },\n  },\n});\n\nexport const { setGlowColor, setCloneToColorblind } = slice.actions;\n\nexport default slice.reducer;\n","import styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport getGlowCvars from \"../redux/glows/getGlowCvars\";\nimport getGlowsCvarText from \"../redux/glows/getGlowsCvarText\";\nimport { GlowCvar } from \"../redux/glows/glowsModel\";\nimport * as glowActions from \"../redux/glows/glowsSlice\";\n\nconst GlowDisplay = ({ glow }: { glow: GlowCvar }): JSX.Element => {\n  return (\n    <GlowCvarBox>\n      <GlowBox {...glow} />\n      <pre>{glow.name}</pre>\n      <span>{glow.description}</span>\n    </GlowCvarBox>\n  );\n};\n\nfunction getGlowCss(g: GlowCvar) {\n  return `rgb(${g.r}, ${g.g}, ${g.b})`;\n}\n\nconst GlowCvarBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  padding: 16px 0;\n`;\nconst GlowBox = styled(\"div\")<GlowCvar>`\n  width: 50px;\n  height: 50px;\n  display: block;\n  background-color: ${(p: GlowCvar) => getGlowCss(p)};\n  box-shadow: 0 0 6px 4px ${(p: GlowCvar) => getGlowCss(p)};\n`;\n\nexport default function GlowsDisplay(): JSX.Element {\n  const glowData = useSelector(getGlowCvars);\n  const cvarText = useSelector(getGlowsCvarText);\n  const shouldCloneToColorblind = useSelector(\n    (s) => s.glows.flags.cloneToColorblind\n  );\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={shouldCloneToColorblind}\n          onChange={({ currentTarget: { checked } }) =>\n            dispatch(glowActions.setCloneToColorblind(!!checked))\n          }\n        />\n        Clone colors to colorblind cvars.\n      </label>\n      <GlowGrid>\n        {glowData.map((gd) => (\n          <GlowDisplay glow={gd} key={gd.name} />\n        ))}\n      </GlowGrid>\n      <pre>{cvarText}</pre>\n    </div>\n  );\n}\n\nconst GlowGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 16px auto;\n\n  > div {\n    flex: 0 0 25%;\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport GlowsDisplay from \"./glows/GlowsDisplay\";\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"L4D2 Glow Picker\";\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>L4D2 Glow Picker</h1>\n      <p>Select some glow colors here.</p>\n      <GlowsDisplay />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport GlowsReducer from \"./glows/glowsSlice\";\n\nconst rootReducer = combineReducers({\n  glows: GlowsReducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}