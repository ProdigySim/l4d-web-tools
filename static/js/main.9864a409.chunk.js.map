{"version":3,"sources":["common/InvisibleButton.tsx","redux/glows/getGlowCvars.ts","utils/parseCfgFile.ts","redux/normalize.ts","redux/glows/glowsSlice.ts","redux/glows/getGlowsCvarText.ts","glows/GlowsCvarOutput.tsx","glows/GlowCfgInput.tsx","glows/GlowsDisplay.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","index.tsx"],"names":["InvisibleButton","styled","button","RENDER_GLOW_ORDER","getGlowCvars","createSelector","s","glows","cvars","flags","cloneToColorblind","map","glow","byId","filter","cvar","isColorblind","stripQuotes","str","replace","floatStrToU8","value","floatToU8","parseFloat","Math","floor","data","indexFn","defaultGlowCvars","glowData","r","g","b","name","endsWith","PojoMap","fromIndexing","orderedIds","slice","createSlice","initialState","reducers","setGlowColor","state","action","payload","colorblindCvar","setCloneToColorblind","actions","setGlowsFromCfg","cfg","dispatch","getState","cvarPairs","split","e","cmd","length","test","isNaN","glowsByName","flatMap","res","exec","glowName","color","has","forEach","prev","get","toFloatStr","u8","getGlowsCvarText","shouldCloneToColorblind","glowCvar","targetGlowName","join","CvarOutput","pre","GlowsCvarOutput","useState","isCopied","setIsCopied","cvarText","useSelector","useEffect","onClick","navigator","clipboard","writeText","FileDropContainer","div","HiddenInput","input","DropOverlay","DropOverlayModal","GlowCfgInput","fileInputRef","useRef","useDispatch","onFileInputChange","event","a","files","target","updateGlowsFromFiles","text","FileDrop","onTargetClick","current","click","onDrop","onChange","ref","type","GlowDisplay","showPicker","setShowPicker","GlowCvarBox","GlowBox","PickerPopover","PickerBackdrop","disableAlpha","glowActions","rgb","description","getGlowCss","p","GlowsDisplay","checked","currentTarget","GlowGrid","gd","key","App","document","title","className","Boolean","window","location","hostname","match","rootReducer","combineReducers","GlowsReducer","store","configureStore","reducer","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9864a409.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nconst InvisibleButton = styled.button`\n  appearance: none;\n  border: none;\n  background: transparent;\n  cursor: pointer;\n`;\n\nexport default InvisibleButton;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { AppState } from \"../rootReducer\";\n\nconst RENDER_GLOW_ORDER = [\n  \"cl_glow_survivor_health_high\",\n  \"cl_glow_survivor_health_med\",\n  \"cl_glow_survivor_health_low\",\n  \"cl_glow_survivor_health_crit\",\n  \"cl_glow_survivor_health_high_colorblind\",\n  \"cl_glow_survivor_health_med_colorblind\",\n  \"cl_glow_survivor_health_low_colorblind\",\n  \"cl_glow_survivor_health_crit_colorblind\",\n  \"cl_glow_survivor\",\n  \"cl_glow_ability\",\n  \"cl_glow_survivor_hurt\",\n  \"cl_glow_survivor_vomit\",\n  \"cl_glow_item\",\n  \"cl_glow_item_far\",\n  \"cl_glow_thirdstrike_item\",\n  \"cl_glow_infected_vomit\",\n  \"cl_glow_ghost_infected\",\n  \"cl_glow_infected\",\n  \"cl_glow_ability_colorblind\",\n  \"cl_glow_thirdstrike_item_colorblind\",\n];\n\nconst getGlowCvars = createSelector(\n  (s: AppState) => s.glows.cvars,\n  (s: AppState) => s.glows.flags.cloneToColorblind,\n  (cvars, cloneToColorblind) =>\n    RENDER_GLOW_ORDER.map((glow) => cvars.byId[glow]!).filter((cvar) => {\n      // If cloneToColorblind is set, hide colorblind version cvars.\n      return !(cloneToColorblind && cvar.isColorblind);\n    })\n);\n\nexport default getGlowCvars;\n","function stripQuotes(str: string) {\n  return str.replace(/['\"]/g, \"\");\n}\n\n// I hate writing this and I really hate the fact that\n// it will probably work well enough.\n/**\n * Get all numeric cvar name/value pairs from a config file.\n * @param cfgFile Config file\n */\nexport default function parseCfgFile(\n  cfgFile: string\n): Array<{ cvar: string; value: number }> {\n  const txt = cfgFile.replace(/\\/\\/.*$/g, \"\");\n  const expressions = txt.split(/;|(\\r?\\n)/g);\n  // Get all expressions with 2 arguments...\n  // Then try to parse them as cvarname,value pairs.\n  return expressions\n    .filter((e) => !!e)\n    .map((e) => e.split(/\\s+/))\n    .filter((cmd) => cmd.length === 2)\n    .map(([cvar, value]) => ({\n      cvar: stripQuotes(cvar),\n      value: stripQuotes(value),\n    }))\n    .filter(({ value }) => /^[\\d.]+$/.test(value))\n    .map(({ cvar, value }) => ({ cvar, value: parseFloat(value) }))\n    .filter(({ value }) => !isNaN(value));\n}\n","import { PojoMap } from \"pojo-maps\";\n\nexport type Normalized<T extends {}, U extends PropertyKey> = {\n  byId: PojoMap<U, T>;\n  orderedIds: U[];\n};\n\nexport function normalize<T extends {}, U extends PropertyKey>(\n  data: T[],\n  indexFn: (item: T) => U\n) {\n  return {\n    byId: PojoMap.fromIndexing(data, indexFn),\n    orderedIds: data.map(indexFn),\n  } as const;\n}\n\nexport const Normalized = {\n  getOrdered: <T extends {}, U extends PropertyKey>(store: Normalized<T, U>) =>\n    store.orderedIds.map((id) => PojoMap.get(store.byId, id)!),\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { PojoMap } from \"pojo-maps\";\nimport { Dispatch } from \"react\";\nimport parseCfgFile from \"../../utils/parseCfgFile\";\nimport { normalize } from \"../normalize\";\nimport { AppState } from \"../rootReducer\";\nimport glowData from \"./glow_data.json\";\n\ntype RGBValues = {\n  r: number;\n  g: number;\n  b: number;\n};\n\nfunction floatStrToU8(value: string): number {\n  return floatToU8(parseFloat(value));\n}\n\nfunction floatToU8(value: number): number {\n  return Math.floor(value * 255);\n}\n\nconst defaultGlowCvars = normalize(\n  glowData.map((cvar) => ({\n    ...cvar,\n    r: floatStrToU8(cvar.r),\n    g: floatStrToU8(cvar.g),\n    b: floatStrToU8(cvar.b),\n    isColorblind: cvar.name.endsWith(\"colorblind\"),\n  })),\n  (glow) => glow.name\n);\n\nconst slice = createSlice({\n  name: \"glows\",\n  initialState: {\n    cvars: defaultGlowCvars,\n    flags: {\n      cloneToColorblind: true,\n    },\n  },\n  reducers: {\n    setGlowColor: (\n      state,\n      action: PayloadAction<{ name: string; value: RGBValues }>\n    ) => {\n      const cvar = state.cvars.byId[action.payload.name];\n      const { r, g, b } = action.payload.value;\n      if (cvar) {\n        cvar.r = r;\n        cvar.g = g;\n        cvar.b = b;\n        const colorblindCvar = state.cvars.byId[`${cvar.name}_colorblind`];\n        if (state.flags.cloneToColorblind && colorblindCvar) {\n          // Also clone this change to the colorblind version of the cvar\n          colorblindCvar.r = r;\n          colorblindCvar.g = g;\n          colorblindCvar.b = b;\n        }\n      }\n    },\n    setCloneToColorblind: (state, action: PayloadAction<boolean>) => {\n      state.flags.cloneToColorblind = action.payload;\n    },\n  },\n});\n\nexport const { setGlowColor, setCloneToColorblind } = slice.actions;\n\nexport const setGlowsFromCfg = (cfg: string) => (\n  dispatch: Dispatch<unknown>,\n  getState: () => AppState\n) => {\n  const cvarPairs = parseCfgFile(cfg);\n\n  const glowsByName = getState().glows.cvars.byId;\n  cvarPairs\n    .flatMap(({ cvar, value }) => {\n      const res = /^(.*)_([rgb])$/i.exec(cvar);\n      if (!res) {\n        return [];\n      }\n      const [, glowName, color] = res;\n      if (!PojoMap.has(glowsByName, glowName)) {\n        return [];\n      }\n      return {\n        name: glowName,\n        value: {\n          [color as \"r\" | \"g\" | \"b\"]: floatToU8(value),\n        },\n      };\n    })\n    .forEach(({ name, value }) => {\n      const prev = PojoMap.get(getState().glows.cvars.byId, name);\n      if (prev) {\n        dispatch(\n          setGlowColor({\n            name,\n            value: {\n              r: prev.r,\n              g: prev.g,\n              b: prev.b,\n              ...value,\n            },\n          })\n        );\n      }\n    });\n};\n\nexport default slice.reducer;\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { AppState } from \"../rootReducer\";\n\nfunction toFloatStr(u8: number) {\n  return `${u8 / 255}`;\n}\nconst getGlowsCvarText = createSelector(\n  (state: AppState) => state.glows.cvars,\n  (state: AppState) => state.glows.flags.cloneToColorblind,\n  (glows, shouldCloneToColorblind) => {\n    return (\n      glows.orderedIds\n        .flatMap((glowCvar) => {\n          const targetGlowName = shouldCloneToColorblind\n            ? glowCvar.replace(/_colorblind$/, \"\")\n            : glowCvar;\n          const glow = glows.byId[targetGlowName]!;\n          return [\n            `${glowCvar}_r \"${toFloatStr(glow.r)}\";`,\n            `${glowCvar}_g \"${toFloatStr(glow.g)}\";`,\n            `${glowCvar}_b \"${toFloatStr(glow.b)}\";`,\n          ];\n        })\n        .join(\"\\n\") + \"\\n\"\n    );\n  }\n);\n\nexport default getGlowsCvarText;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from \"@emotion/styled\";\nimport getGlowsCvarText from \"../redux/glows/getGlowsCvarText\";\n\nconst GlowsCvarOutput = () => {\n  const [isCopied, setIsCopied] = useState(false);\n  const cvarText = useSelector(getGlowsCvarText);\n\n  useEffect(() => {\n    // When cvar text changes, reset the \"copied\" state.\n    setIsCopied(false);\n  }, [cvarText]);\n  return (\n    <div>\n      <h2>Generated Glows</h2>\n      <p>Copy paste these into your autoexec.</p>\n      <div>\n        <button\n          onClick={() => {\n            navigator.clipboard.writeText(cvarText);\n            setIsCopied(true);\n          }}\n        >\n          {isCopied ? \"Copied!\" : \"Copy to Clipboard\"}\n        </button>\n      </div>\n      <CvarOutput>{cvarText}</CvarOutput>\n    </div>\n  );\n};\n\nconst CvarOutput = styled.pre`\n  border: 2px dotted white;\n  background-color: #4a505a;\n  border-radius: 8px;\n  padding: 8px;\n`;\n\nexport default GlowsCvarOutput;\n","import React, { ChangeEvent, useRef } from \"react\";\nimport { FileDrop } from \"react-file-drop\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"@emotion/styled\";\nimport { setGlowsFromCfg } from \"../redux/glows/glowsSlice\";\n\nconst GlowCfgInput = (): React.ReactElement => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const dispatch = useDispatch();\n  const onFileInputChange = async (event: ChangeEvent<HTMLInputElement>) => {\n    const { files } = event.target;\n    void updateGlowsFromFiles(files);\n  };\n  const updateGlowsFromFiles = async (files: FileList | null) => {\n    if (files && files.length > 0) {\n      const text = await files[0].text();\n      dispatch(setGlowsFromCfg(text));\n    }\n  };\n  const onTargetClick = () => {\n    fileInputRef.current?.click();\n  };\n  return (\n    <FileDropContainer>\n      <div>\n        <FileDrop onTargetClick={onTargetClick} onDrop={updateGlowsFromFiles}>\n          <button>Browse</button>\n          <DropOverlay>\n            <DropOverlayModal>\n              Drop a CFG file anywhere to load your glows.\n            </DropOverlayModal>\n          </DropOverlay>\n        </FileDrop>\n        for a .cfg file or drag one here.\n      </div>\n      <HiddenInput\n        onChange={onFileInputChange}\n        ref={fileInputRef}\n        type=\"file\"\n      />\n    </FileDropContainer>\n  );\n};\n\nconst FileDropContainer = styled.div`\n  .file-drop {\n    display: inline-block;\n    padding-right: 8px;\n  }\n  .file-drop-target {\n    display: inline-block;\n  }\n`;\nconst HiddenInput = styled.input`\n  display: none;\n`;\n\nconst DropOverlay = styled.div`\n  display: none;\n  .file-drop-dragging-over-frame & {\n    position: fixed;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n`;\n\nconst DropOverlayModal = styled.div`\n  width: 320px;\n  height: 320px;\n  border: 4px dashed grey;\n  background-color: white;\n  border-radius: 16px;\n  text-align: center;\n  padding: 16px;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  color: black;\n`;\n\nexport default GlowCfgInput;\n","import styled from \"@emotion/styled\";\nimport React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SketchPicker } from \"react-color\";\nimport InvisibleButton from \"../common/InvisibleButton\";\nimport getGlowCvars from \"../redux/glows/getGlowCvars\";\nimport { GlowCvar } from \"../redux/glows/glowsModel\";\nimport * as glowActions from \"../redux/glows/glowsSlice\";\nimport GlowsCvarOutput from \"./GlowsCvarOutput\";\nimport GlowCfgInput from \"./GlowCfgInput\";\n\nconst GlowDisplay = ({ glow }: { glow: GlowCvar }): JSX.Element => {\n  const dispatch = useDispatch();\n  const [showPicker, setShowPicker] = useState(false);\n  const { r, g, b } = glow;\n  return (\n    <GlowCvarBox>\n      <div>\n        <InvisibleButton onClick={() => setShowPicker(!showPicker)}>\n          <GlowBox {...glow} />\n        </InvisibleButton>\n        {showPicker && (\n          <PickerPopover>\n            <PickerBackdrop\n              onClick={() => setShowPicker(false)}\n            ></PickerBackdrop>\n            <SketchPicker\n              disableAlpha={true}\n              color={{ r, g, b }}\n              onChange={(e) =>\n                dispatch(\n                  glowActions.setGlowColor({ name: glow.name, value: e.rgb })\n                )\n              }\n            />\n          </PickerPopover>\n        )}\n      </div>\n      <pre>{glow.name}</pre>\n      <span>{glow.description}</span>\n    </GlowCvarBox>\n  );\n};\n\nfunction getGlowCss(g: GlowCvar) {\n  return `rgb(${g.r}, ${g.g}, ${g.b})`;\n}\n\nconst PickerPopover = styled.div`\n  position: absolute;\n`;\n\nconst PickerBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nconst GlowCvarBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  align-items: center;\n  padding: 16px 0;\n`;\nconst GlowBox = styled(\"div\")<GlowCvar>`\n  width: 50px;\n  height: 50px;\n  display: block;\n  background-color: ${(p: GlowCvar) => getGlowCss(p)};\n  box-shadow: 0 0 6px 4px ${(p: GlowCvar) => getGlowCss(p)};\n`;\n\nexport default function GlowsDisplay(): JSX.Element {\n  const glowData = useSelector(getGlowCvars);\n  const shouldCloneToColorblind = useSelector(\n    (s) => s.glows.flags.cloneToColorblind\n  );\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <GlowCfgInput />\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={shouldCloneToColorblind}\n          onChange={({ currentTarget: { checked } }) =>\n            dispatch(glowActions.setCloneToColorblind(!!checked))\n          }\n        />\n        Clone colors to colorblind cvars.\n      </label>\n      <GlowGrid>\n        {glowData.map((gd) => (\n          <GlowDisplay glow={gd} key={gd.name} />\n        ))}\n      </GlowGrid>\n      <GlowsCvarOutput />\n    </div>\n  );\n}\n\nconst GlowGrid = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 16px auto;\n\n  > div {\n    flex: 0 0 25%;\n  }\n`;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport GlowsDisplay from \"./glows/GlowsDisplay\";\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"L4D2 Glow Picker\";\n  }, []);\n  return (\n    <div className=\"App\">\n      <h1>L4D2 Glow Picker</h1>\n      <p>\n        Upload a cfg file to import glows, or start customizing from the default\n        glows.\n      </p>\n      <GlowsDisplay />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport GlowsReducer from \"./glows/glowsSlice\";\n\nconst rootReducer = combineReducers({\n  glows: GlowsReducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./redux/rootReducer\";\n\nconst store = configureStore({ reducer: rootReducer });\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}